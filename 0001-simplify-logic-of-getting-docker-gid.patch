From d3d3a42d214d0f216a75d6ff792ef9239dab09df Mon Sep 17 00:00:00 2001
From: "Simental Magana, Marcos" <marcos.simental.magana@intel.com>
Date: Mon, 28 Jan 2019 20:14:30 +0000
Subject: [PATCH] simplify logic of getting docker gid

docker checks existance of group 'docker' for creating the socket
for the 'docker' group, however, it checks by parsing /etc/group.

As the 'docker' group does not exists (on CLR) in /etc/group but in
/usr/share/defaults/etc/group instead, it creates the socket with
root:root unless an user in the 'docker' group entry exists on /etc/group.

This forbids to run docker commands to a user in the 'docker' group if
the socket was started with root:root ownership. This happens if we do:

1) start the docker service
2) add <USER> to the 'docker' group
3) run any docker command as <USER>

a simple workaround is to restart the docker service or adding <USER>
to the 'docker' group prior to starting the docker service, so when
docker parses /etc/group there's data supporting the 'docker' group
existance.

This commit changes docker validation to make use of golang function
user.lookupGroup which relies on the standard C library (libc) routines
such as getpwuid_r and getgrnam_r (https://tip.golang.org/src/os/user/user.go)

Signed-off-by: Simental Magana, Marcos <marcos.simental.magana@intel.com>
---
 .../engine/daemon/listeners/group_unix.go       | 17 +++++------------
 1 file changed, 5 insertions(+), 12 deletions(-)

diff --git a/components/engine/daemon/listeners/group_unix.go b/components/engine/daemon/listeners/group_unix.go
index 9cc17eb..857737c 100644
--- a/components/engine/daemon/listeners/group_unix.go
+++ b/components/engine/daemon/listeners/group_unix.go
@@ -4,29 +4,22 @@ package listeners // import "github.com/docker/docker/daemon/listeners"
 
 import (
 	"fmt"
+	"os/user"
 	"strconv"
 
-	"github.com/opencontainers/runc/libcontainer/user"
 	"github.com/pkg/errors"
 )
 
 const defaultSocketGroup = "docker"
 
 func lookupGID(name string) (int, error) {
-	groupFile, err := user.GetGroupPath()
+	//user.LookupGroup uses (libc) getgrnam_r internally
+	// https://tip.golang.org/src/os/user/user.go
+	group, err := user.LookupGroup(name)
 	if err != nil {
 		return -1, errors.Wrap(err, "error looking up groups")
 	}
-	groups, err := user.ParseGroupFileFilter(groupFile, func(g user.Group) bool {
-		return g.Name == name || strconv.Itoa(g.Gid) == name
-	})
-	if err != nil {
-		return -1, errors.Wrapf(err, "error parsing groups for %s", name)
-	}
-	if len(groups) > 0 {
-		return groups[0].Gid, nil
-	}
-	gid, err := strconv.Atoi(name)
+	gid, err := strconv.Atoi(group.Gid)
 	if err == nil {
 		return gid, nil
 	}
-- 
2.20.1

