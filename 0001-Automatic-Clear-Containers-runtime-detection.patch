From 18ad959860acd698250de6a6388e1ed0cccb4ba4 Mon Sep 17 00:00:00 2001
From: Jose Carlos Venegas Munoz <jose.carlos.venegas.munoz@intel.com>
Date: Tue, 12 Dec 2017 21:39:18 +0000
Subject: [PATCH 1/2] Automatic Clear Containers runtime detection

---
 .../engine/cmd/dockerd/config_common_unix.go       |  2 +-
 components/engine/cmd/dockerd/daemon.go            |  2 +
 components/engine/daemon/config/cc-daemon.go       | 98 ++++++++++++++++++++++
 components/engine/daemon/config/config.go          |  5 ++
 components/engine/daemon/daemon_unix.go            |  4 +
 5 files changed, 110 insertions(+), 1 deletion(-)
 create mode 100644 components/engine/daemon/config/cc-daemon.go

diff --git a/components/engine/cmd/dockerd/config_common_unix.go b/components/engine/cmd/dockerd/config_common_unix.go
index b29307b..851ddd9 100644
--- a/components/engine/cmd/dockerd/config_common_unix.go
+++ b/components/engine/cmd/dockerd/config_common_unix.go
@@ -29,6 +29,6 @@ func installUnixConfigFlags(conf *config.Config, flags *pflag.FlagSet) {
 	flags.BoolVar(&conf.BridgeConfig.InterContainerCommunication, "icc", true, "Enable inter-container communication")
 	flags.Var(opts.NewIPOpt(&conf.BridgeConfig.DefaultIP, "0.0.0.0"), "ip", "Default IP when binding container ports")
 	flags.Var(opts.NewNamedRuntimeOpt("runtimes", &conf.Runtimes, config.StockRuntimeName), "add-runtime", "Register an additional OCI compatible runtime")
-	flags.StringVar(&conf.DefaultRuntime, "default-runtime", config.StockRuntimeName, "Default OCI runtime for containers")
+	flags.StringVar(&conf.DefaultRuntime, "default-runtime", "", "Default OCI runtime for containers")
 
 }
diff --git a/components/engine/cmd/dockerd/daemon.go b/components/engine/cmd/dockerd/daemon.go
index edf8f40..e608301 100644
--- a/components/engine/cmd/dockerd/daemon.go
+++ b/components/engine/cmd/dockerd/daemon.go
@@ -466,6 +466,8 @@ func loadDaemonCliConfig(opts *daemonOptions) (*config.Config, error) {
 		return nil, err
 	}
 
+	config.SelectDefaultRuntime(conf)
+
 	if conf.V2Only == false {
 		logrus.Warnf(`The "disable-legacy-registry" option is deprecated and wil be removed in Docker v17.12. Interacting with legacy (v1) registries will no longer be supported in Docker v17.12"`)
 	}
diff --git a/components/engine/daemon/config/cc-daemon.go b/components/engine/daemon/config/cc-daemon.go
new file mode 100644
index 0000000..4282b26
--- /dev/null
+++ b/components/engine/daemon/config/cc-daemon.go
@@ -0,0 +1,98 @@
+package config
+
+import (
+	"github.com/sirupsen/logrus"
+	"github.com/docker/docker/api/types"
+	"os"
+	"os/exec"
+)
+
+const (
+	clearContainers2RuntimeName   = "cor"
+	clearContainers3RuntimeName   = "cc-runtime"
+	clearContainers2RuntimeBinary = "cc-oci-runtime"
+	clearContainers3RuntimeBinary = "cc-runtime"
+)
+
+func hasKVM() bool {
+	if _, err := os.Stat("/dev/kvm"); err == nil {
+		return true
+	}
+	return false
+}
+
+func hasClearContainers2() bool {
+	if _, err := exec.LookPath(clearContainers2RuntimeBinary); err == nil {
+		return true
+	}
+	return false
+}
+
+func hasClearContainers3() bool {
+	if _, err := exec.LookPath(clearContainers3RuntimeBinary); err == nil {
+		return true
+	}
+	return false
+}
+
+// SetupClearContainersRuntime will register clear-containers runtime if:
+// - kvm is enabled
+// - Clear Containers runtime is installed
+// - Clear Containers runtime was not registered previously
+func SetupClearContainersRuntime(config *Config) bool {
+	runtimes := config.GetAllRuntimes()
+	addedCC := false
+	if !hasKVM() {
+		return false
+	}
+
+	if config.Runtimes == nil {
+		config.Runtimes = make(map[string]types.Runtime)
+	}
+
+	if _, ok := runtimes[clearContainers2RuntimeName]; !ok && hasClearContainers2() {
+		ccRuntime := types.Runtime{Path: clearContainers2RuntimeBinary}
+		config.Runtimes[clearContainers2RuntimeName] = ccRuntime
+		addedCC = true
+	}
+
+	if _, ok := runtimes[clearContainers3RuntimeName]; !ok && hasClearContainers3() {
+		ccRuntime := types.Runtime{Path: clearContainers3RuntimeBinary}
+		config.Runtimes[clearContainers3RuntimeName] = ccRuntime
+		addedCC = true
+	}
+	return addedCC
+}
+
+// SelectDefaultRuntime will choose  what runtime use:
+// - If default runtime defined, do nothing
+// Clear Containers is default if:
+// - clear-containers runtime is registered
+// - No default runtime was explicitly defined
+// stockRuntimeName (runc) is default in any other case
+func SelectDefaultRuntime(config *Config) {
+
+	if config.DefaultRuntime != "" {
+		logrus.Infof("Using defined Default rutime (%s)", config.DefaultRuntime)
+		return
+	}
+
+	runtimes := config.GetAllRuntimes()
+	// Check if CC 3.x  was added, and use it
+	if _, ccRegistered := runtimes[clearContainers3RuntimeName]; ccRegistered {
+		config.DefaultRuntime = clearContainers3RuntimeName
+		logrus.Infof("Using Clear Containers 3 (%s) as Default rutime", config.DefaultRuntime)
+		return
+	}
+
+	// Check if CC 2.x was added, and use it
+	if _, ccRegistered := runtimes[clearContainers2RuntimeName]; ccRegistered {
+		config.DefaultRuntime = clearContainers2RuntimeName
+		logrus.Infof("Using Clear Containers 2 (%s) as Default rutime", config.DefaultRuntime)
+		return
+	}
+
+	config.DefaultRuntime = StockRuntimeName
+	logrus.Infof("Using %s as Default rutime", config.DefaultRuntime)
+	return
+}
diff --git a/components/engine/daemon/config/config.go b/components/engine/daemon/config/config.go
index 501c07a..394ce95 100644
--- a/components/engine/daemon/config/config.go
+++ b/components/engine/daemon/config/config.go
@@ -505,6 +505,11 @@ func Validate(config *Config) error {
 		return err
 	}
 
+	// Add Clear containers runtime if possible
+	if SetupClearContainersRuntime(config) {
+		logrus.Infof("Clear Containers runtime added")
+	}
+
 	if defaultRuntime := config.GetDefaultRuntimeName(); defaultRuntime != "" && defaultRuntime != StockRuntimeName {
 		runtimes := config.GetAllRuntimes()
 		if _, ok := runtimes[defaultRuntime]; !ok {
diff --git a/components/engine/daemon/daemon_unix.go b/components/engine/daemon/daemon_unix.go
index 80d8d55..cf74150 100644
--- a/components/engine/daemon/daemon_unix.go
+++ b/components/engine/daemon/daemon_unix.go
@@ -604,6 +604,10 @@ func verifyPlatformContainerSettings(daemon *Daemon, hostConfig *containertypes.
 			return warnings, fmt.Errorf("cgroup-parent for systemd cgroup should be a valid slice named as \"xxx.slice\"")
 		}
 	}
+	logrus.Info("Runtime:")
+	logrus.Info(hostConfig.Runtime)
+	logrus.Info("Default Runtime:")
+	logrus.Info(daemon.configStore.GetDefaultRuntimeName())
 	if hostConfig.Runtime == "" {
 		hostConfig.Runtime = daemon.configStore.GetDefaultRuntimeName()
 	}
-- 
2.15.0

